module rom(address,data);
	input [8:0] address; //needs to be changed
	output [47:0] data;	//needs to be changed
	reg [47:0] array[511:0];	//needs to be changed
	always @*
		begin
			array[16]  = 40'b011000_1000_1_0000_0000_000010000000_0_0_000010001_000_000; // ORS <- MDR_rd >> 8
			array[17]  = 40'b111100_0000_0_1001_0101_100000001000_0_0_000010010_000_000; // MAR <- SP <- SP + 4
			array[18]  = 40'b011000_0000_0_0001_0000_001000000000_0_0_000010100_000_000; // MDR_wr <- ORS
			array[20]  = 40'b000000_0000_0_0000_0000_000000000000_0_0_000011101_101_000; // START, WRITE
			array[29]  = 40'b000000_0000_0_0000_0000_000000000000_1_0_100000000_000_000; // GOTO FETCH
			/** FETCH **/
						/*  CMD		SH	DIR A 	B 	REG INC WIDE  NEXT   MEM  JMP*/
			array[256] = 40'b011000_0000_0_0011_0000_100000000000_1_0_100000001_000_000; // MAR <- PC, PC++
			array[257] = 40'b000000_0000_0_0000_0000_000000000000_0_0_100000010_110_000; // START, READ
			array[258] = 40'b000000_0000_0_0000_0000_010000000000_0_0_100000011_000_000; // MDR_rd <- MEM_read
			array[259] = 40'b011000_0000_0_0000_0000_010000000000_0_0_000000000_000_100; // IR <- OPCODE
		end
	assign data = array[address];
endmodule